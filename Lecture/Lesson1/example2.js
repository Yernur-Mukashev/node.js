// HTTP сервер на Node.js

const http = require("http");
// На первой строке мы импортируем модуль HTTP с помощью функции require(). Эта функция возвращает объект, который содержит функции и объекты модуля HTTP.
// Пока можете считать, что require — это функция, которая возвращает нужную встроенную библиотеку по названию, переданному в первом аргументе.

const server = http.createServer((req, res) => {
	console.log("Запрос получен");
	//Тут мы создаем объект server с помощью функции http.createServer(). Эта функция принимает в качестве аргумента функцию обратного вызова (callback), которая будет вызываться при каждом HTTP-запросе к серверу. Эта функция обратного вызова получает два параметра: req и res.
	// Параметр res представляет объект HTTP-ответа
	// Параметр req представляет объект HTTP-запроса

	res.writeHead(200, {
		"Content-Type": "text/html; charset=UTF-8",
		// Метод res.writeHead() позволяет установить заголовки ответа — метаданные, которые передаются вместе с данными ответа и содержат информацию об их типе, размере, кодировке и других характеристиках.
		// Метод res.writeHead() принимает два аргумента:
		// 1. Код состояния (status code) — число, которое указывает на результат обработки запроса сервером. Например, код 200 означает успешный ответ, а код 404 — что запрашиваемый ресурс не найден.
		// 2. Объект заголовков (headers) — объект, который содержит пары ключ-значение, где ключ — это имя заголовка, а значение — это значение заголовка. Например, {‘Content-Type’: ‘text/html’} означает, что тип данных ответа — это HTML-текст.
	});
	res.end("<h1>Добро пожаловать на мой сайт!</h1>");
	// Метод res.end() позволяет завершить отправку ответа. Этот метод принимает один необязательный аргумент: данные (data).
	// Данные — это строка или буфер, содержащие данные ответа, которые мы хотим отправить клиенту. Например, ‘<h1>Hello world!</h1>’ означает, что мы хотим отправить HTML-текст с заголовком «Hello world!». Если мы не передаем аргумент data в метод res.end(), то мы отправляем пустой ответ.
});

const port = 3000;
// Определяем порт нашего сервера. Порт — это уникальный адрес программы на компьютере для работы в сети. В операционных системах может быть задействовано 65535 портов.

server.listen(port, () => {
	console.log(`Сервер запущен на порту ${port}`);
});
// мы указываем порт для запуска сервера с помощью метода server.listen(). Этот метод принимает два аргумента: порт и функцию обратного вызова, которая будет вызываться при успешном запуске сервера.
